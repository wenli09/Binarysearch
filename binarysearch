public int binarySearch(int[] nums, int target) {
// Corner case
    if (nums == null || nums.length == 0) return -1;

    int left = 0, right = nums.length - 1, int mid = 0;    
    while (left + 1 < right) {
        mid = left + (right - left) / 2;
        if (nums[mid] < target) left = mid;
        else if (nums[mid] > target) right = mid;
        else return mid;
    }
    if (nums[left] == target) return left;
    if (nums[right] == target) return right;
    return -1;
}


second way
public in binarySearch(int[] nums, int target){
//corner case
    if (nums ==null || nums, length == 0) return -1;
    int left = 0;
    int right = nums, length -1;
    // int mid = 0;
    while ( left <= right){
    int mid = left + (right-left) /2; index + size) 
    if (nums[mid] == target) return mid;
    if(nums [mid] < target) left = mid + 1;
    if (nums [mid] > target) right = mid -1;
    }
    return -1;
    
    }
     
